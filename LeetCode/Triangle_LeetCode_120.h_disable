#pragma once
// 
//
#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
#include "Problems.h"
#include <windows.h>

using namespace std;

class Triangle_LeetCode_120 : public Problems {

  int minimumTotal(vector<vector<int>>& triangle)
  {
    vector<vector<int>> DP;
    DP.resize(triangle.size());
    for (int i = 0; i < triangle.size(); i++) {
      DP[i].resize(triangle.size());
      fill(DP[i].begin(), DP[i].end(), INFINITE);
    }
    return minimumTotal_Recur(triangle, 0, 0, triangle.size() - 1, triangle[0].size() - 1, DP);
  }

  int minimumTotal_Iterate(vector<vector<int>>& triangle)
  {
    if (triangle.size() == 1)
      return triangle[0][0];

    vector<vector<int>> DP;
    DP.resize(triangle.size());
    for (int i = 0; i < triangle.size(); i++) {
      DP[i].resize(triangle.size());
      fill(DP[i].begin(), DP[i].end(), INFINITE);
    }

    for (int r = triangle.size() - 2; r >= 0; r--)
    {
      int minsum = INT_MAX;
      minsum = min(minsum, ((r == RC - 2) ? triangle[r + 1][c] : DP[r + 1][c]));
      minsum = min(minsum, ((r == RC - 2) ? triangle[r + 1][c + 1] : DP[r + 1][c + 1]));
      DP[r][c] = minsum;
    }    
    return DP[0][0];
  }

  int minimumTotal_Recur(vector<vector<int>>& triangle, int r, int c, int RC, int CC, vector<vector<int>>& DP)
  {
    //Base case
    if (r == RC)
      return triangle[r][c];

    if ((r > RC) || (c > CC))
      return 0;

    if (DP[r][c] != INFINITE)
      return DP[r][c];

    int minsum = INT_MAX, VC = triangle[r].size();
    minsum = min(minsum, minimumTotal_Recur(triangle, r + 1, c, RC, VC, DP) + triangle[r][c]);
    minsum = min(minsum, minimumTotal_Recur(triangle, r + 1, c + 1, RC, VC, DP) + triangle[r][c]);
    DP[r][c] = minsum;

    return minsum;
  }

public:
  virtual int run() override
  {
    cout << "Triangle_LeetCode_120" << endl;
    
    //vector<vector<int>> triangle = { {2},{3, 4},{6, 5, 7},{4, 1, 8, 3} };
    // [[1], [-2, -5], [3, 6, 9], [-1, 2, 4, -3]] Expected 1
    vector<vector<int>> triangle = { {-1}, {2, 3}, {1, -1, -3} };
    //vector<vector<int>> triangle = { {1}, {-2, -5}, {3, 6, 9}, {-1,2,4,-3} };
    cout << "Triangle_LeetCode_120 : " << minimumTotal(triangle) << endl;
    cout << endl << endl;
    return 0;
  }
};